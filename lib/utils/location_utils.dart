import 'dart:math';
import 'package:cloud_firestore/cloud_firestore.dart';

class LocationUtils {
  /// T√≠nh kho·∫£ng c√°ch gi·ªØa hai t·ªça ƒë·ªô ƒë·ªãa l√Ω b·∫±ng c√¥ng th·ª©c Haversine
  /// Tr·∫£ v·ªÅ kho·∫£ng c√°ch t√≠nh b·∫±ng km
  static double calculateDistance(
    double lat1, 
    double lon1, 
    double lat2, 
    double lon2,
  ) {
    // Chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªô sang radian
    final latRad1 = _degreesToRadians(lat1);
    final lonRad1 = _degreesToRadians(lon1);
    final latRad2 = _degreesToRadians(lat2);
    final lonRad2 = _degreesToRadians(lon2);

    // C√¥ng th·ª©c Haversine
    final dLat = latRad2 - latRad1;
    final dLon = lonRad2 - lonRad1;
    final a = sin(dLat / 2) * sin(dLat / 2) +
        cos(latRad1) * cos(latRad2) * sin(dLon / 2) * sin(dLon / 2);
    final c = 2 * atan2(sqrt(a), sqrt(1 - a));
    
    // B√°n k√≠nh Tr√°i ƒê·∫•t (km)
    const earthRadius = 6371.0;
    
    return earthRadius * c;
  }

  /// Chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªô sang radian
  static double _degreesToRadians(double degrees) {
    return degrees * (pi / 180);
  }

  /// Chuy·ªÉn ƒë·ªïi ƒë·ªãa ch·ªâ th√†nh v·ªã tr√≠ th√¥ng qua collection locations
  static Map<String, double>? getLocationFromAddress(dynamic address) {
    // N·∫øu address l√† null
    if (address == null) {
      print('‚ö†Ô∏è LocationUtils: ƒê·ªãa ch·ªâ null, tr·∫£ v·ªÅ null');
      return null;
    }
    
    // N·∫øu address ƒë√£ l√† Map c√≥ lat v√† lng, s·ª≠ d·ª•ng tr·ª±c ti·∫øp
    if (address is Map<String, dynamic>) {
      if (address.containsKey('lat') && address.containsKey('lng')) {
        double? lat = (address['lat'] is double) 
            ? address['lat']
            : double.tryParse(address['lat'].toString());
            
        double? lng = (address['lng'] is double) 
            ? address['lng']
            : double.tryParse(address['lng'].toString());
        
        if (lat != null && lng != null) {
          print('‚ÑπÔ∏è LocationUtils: L·∫•y v·ªã tr√≠ t·ª´ Map: $lat, $lng');
          return {'lat': lat, 'lng': lng};
        }
      } else if (address.containsKey('address')) {
        // N·∫øu kh√¥ng c√≥ t·ªça ƒë·ªô nh∆∞ng c√≥ ƒë·ªãa ch·ªâ text, d√πng ƒë·ªãa ch·ªâ ƒë·ªÉ t√¨m
        print('‚ÑπÔ∏è LocationUtils: L·∫•y v·ªã tr√≠ t·ª´ address field');
        return getLocationFromAddress(address['address']);
      }
      
      print('‚ö†Ô∏è LocationUtils: Map kh√¥ng ch·ª©a th√¥ng tin v·ªã tr√≠ h·ª£p l·ªá, tr·∫£ v·ªÅ null');
      return null;
    }
    
    // Chuy·ªÉn ƒë·ªïi sang String
    String addressStr = address.toString();
    
    // N·∫øu ƒë·ªãa ch·ªâ r·ªóng
    if (addressStr.isEmpty) {
      print('‚ö†Ô∏è LocationUtils: ƒê·ªãa ch·ªâ r·ªóng, tr·∫£ v·ªÅ null');
      return null;
    }

    // Danh s√°ch v·ªã tr√≠ m·∫´u
    final locationMap = {
      'Nguyen Tat Thanh University': {'lat': 10.7326, 'lng': 106.6975},
      'ƒê·∫°i h·ªçc Nguy·ªÖn T·∫•t Th√†nh': {'lat': 10.7326, 'lng': 106.6975},
      'NTTU': {'lat': 10.7326, 'lng': 106.6975},
      'Nguy·ªÖn T·∫•t Th√†nh': {'lat': 10.7326, 'lng': 106.6975},
      'Qu·∫≠n 1': {'lat': 10.7769, 'lng': 106.6989},
      'Qu·∫≠n 3': {'lat': 10.7800, 'lng': 106.6820},
      'Qu·∫≠n 4': {'lat': 10.7590, 'lng': 106.7040},
      'Qu·∫≠n 5': {'lat': 10.7551, 'lng': 106.6608},
      'Qu·∫≠n 6': {'lat': 10.7469, 'lng': 106.6350},
      'Qu·∫≠n 7': {'lat': 10.7382, 'lng': 106.7321},
      'Qu·∫≠n 8': {'lat': 10.7226, 'lng': 106.6283},
      'Qu·∫≠n 10': {'lat': 10.7731, 'lng': 106.6607},
      'Qu·∫≠n 11': {'lat': 10.7629, 'lng': 106.6507},
      'Qu·∫≠n 12': {'lat': 10.8671, 'lng': 106.6413},
      'Qu·∫≠n B√¨nh Th·∫°nh': {'lat': 10.8105, 'lng': 106.7091},
      'Qu·∫≠n T√¢n B√¨nh': {'lat': 10.8031, 'lng': 106.6522},
      'Qu·∫≠n T√¢n Ph√∫': {'lat': 10.7900, 'lng': 106.6281},
      'Qu·∫≠n Ph√∫ Nhu·∫≠n': {'lat': 10.7999, 'lng': 106.6816},
      'Qu·∫≠n G√≤ V·∫•p': {'lat': 10.8386, 'lng': 106.6646},
      'Qu·∫≠n Th·ªß ƒê·ª©c': {'lat': 10.8555, 'lng': 106.7936},
      'Qu·∫≠n B√¨nh T√¢n': {'lat': 10.7654, 'lng': 106.6017},
      'K√Ω t√∫c x√° NTTU': {'lat': 10.7340, 'lng': 106.6990},
      'Th√†nh Ph·ªë Th·ªß ƒê·ª©c': {'lat': 10.8555, 'lng': 106.7936},
      // Th√™m ƒë·ªãa ch·ªâ m·ªõi t·ª´ log
      '300A, Nguy·ªÖn T·∫•t Th√†nh, P.13, Q.4, Tp.HCM': {'lat': 10.761020, 'lng': 106.710520},
      'Nguy·ªÖn T·∫•t Th√†nh, Q.4': {'lat': 10.761020, 'lng': 106.710520},
    };

    // T√¨m v·ªã tr√≠ t·ª´ danh s√°ch c·ª©ng tr∆∞·ªõc
    for (final entry in locationMap.entries) {
      if (addressStr.toLowerCase().contains(entry.key.toLowerCase())) {
        final result = {'lat': entry.value['lat']!, 'lng': entry.value['lng']!};
        print('‚úÖ LocationUtils: T√¨m th·∫•y v·ªã tr√≠ cho "$addressStr" t·ª´ danh s√°ch c·ª©ng: ${result['lat']}, ${result['lng']}');
        return result;
      }
    }

    // Ghi log r√µ r√†ng
    print('‚ö†Ô∏è LocationUtils: Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ cho "$addressStr" trong danh s√°ch c·ª©ng. Th·ª≠ s·ª≠ d·ª•ng getLocationFromAddressAsync ƒë·ªÉ truy v·∫•n Firestore');
    
    // Tr·∫£ v·ªÅ null thay v√¨ v·ªã tr√≠ m·∫∑c ƒë·ªãnh
    return null;
  }

  /// Ph∆∞∆°ng th·ª©c b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ t√¨m ƒë·ªãa ch·ªâ t·ª´ collection locations trong Firestore
  static Future<Map<String, double>?> getLocationFromAddressAsync(dynamic address) async {
    // N·∫øu address l√† null ho·∫∑c r·ªóng, tr·∫£ v·ªÅ null
    if (address == null) {
      print('‚ö†Ô∏è LocationUtils: ƒê·ªãa ch·ªâ null, tr·∫£ v·ªÅ null');
      return null;
    }
    
    // X·ª≠ l√Ω n·∫øu address ƒë√£ l√† Map
    if (address is Map<String, dynamic>) {
      if (address.containsKey('lat') && address.containsKey('lng')) {
        double? lat = (address['lat'] is double) 
            ? address['lat']
            : double.tryParse(address['lat'].toString());
            
        double? lng = (address['lng'] is double) 
            ? address['lng']
            : double.tryParse(address['lng'].toString());
        
        if (lat != null && lng != null) {
          print('‚ÑπÔ∏è LocationUtils: L·∫•y v·ªã tr√≠ t·ª´ Map: $lat, $lng');
          return {'lat': lat, 'lng': lng};
        }
      } else if (address.containsKey('address')) {
        return getLocationFromAddressAsync(address['address']);
      }
      
      print('‚ö†Ô∏è LocationUtils: Map kh√¥ng ch·ª©a th√¥ng tin v·ªã tr√≠ h·ª£p l·ªá, tr·∫£ v·ªÅ null');
      return null;
    }
    
    // Chuy·ªÉn ƒë·ªïi sang String
    String addressStr = address.toString();
    
    if (addressStr.isEmpty) {
      print('‚ö†Ô∏è LocationUtils: ƒê·ªãa ch·ªâ r·ªóng, tr·∫£ v·ªÅ null');
      return null;
    }
    
    try {
      print('üîç LocationUtils: ƒêang t√¨m ki·∫øm ƒë·ªãa ch·ªâ "$addressStr" trong Firestore');
      
      // Truy v·∫•n collection locations ƒë·ªÉ t√¨m ƒë·ªãa ch·ªâ t∆∞∆°ng ·ª©ng
      final QuerySnapshot locationsSnapshot = await FirebaseFirestore.instance
          .collection('locations')
          .get();
      
      // So s√°nh ƒë·ªãa ch·ªâ v√† t√¨m k·∫øt qu·∫£ g·∫ßn nh·∫•t
      String matchedAddress = '';
      Map<String, double>? coordinates;
      
      for (var doc in locationsSnapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final locationAddress = data['address'] as String? ?? '';
        
        // Ki·ªÉm tra n·∫øu ƒë·ªãa ch·ªâ ch·ª©a chu·ªói t√¨m ki·∫øm ho·∫∑c ng∆∞·ª£c l·∫°i
        if (locationAddress.toLowerCase().contains(addressStr.toLowerCase()) || 
            addressStr.toLowerCase().contains(locationAddress.toLowerCase())) {
          
          // N·∫øu t√¨m th·∫•y ƒë·ªãa ch·ªâ ph√π h·ª£p h∆°n (d√†i h∆°n) th√¨ c·∫≠p nh·∫≠t
          if (locationAddress.length > matchedAddress.length) {
            matchedAddress = locationAddress;
            
            // L·∫•y t·ªça ƒë·ªô t·ª´ d·ªØ li·ªáu
            if (data.containsKey('coordinates') && data['coordinates'] != null) {
              final coords = data['coordinates'] as Map<String, dynamic>;
              coordinates = {
                'lat': coords['lat'] as double,
                'lng': coords['lng'] as double,
              };
            }
          }
        }
      }
      
      if (coordinates != null) {
        print('‚úÖ LocationUtils: T√¨m th·∫•y v·ªã tr√≠ cho "$addressStr" t·ª´ Firestore: ${coordinates['lat']}, ${coordinates['lng']}');
        return coordinates;
      }
      
      print('‚ö†Ô∏è LocationUtils: Kh√¥ng t√¨m th·∫•y v·ªã tr√≠ cho "$addressStr" trong Firestore');
      
      // S·ª≠ d·ª•ng getLocationFromAddress ƒë·ªÉ fallback v·ªÅ danh s√°ch c·ª©ng
      return getLocationFromAddress(addressStr);
      
    } catch (e) {
      print('‚ùå LocationUtils: L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ t·ª´ Firestore: $e');
      
      // S·ª≠ d·ª•ng getLocationFromAddress ƒë·ªÉ fallback v·ªÅ danh s√°ch c·ª©ng
      return getLocationFromAddress(addressStr);
    }
  }
} 